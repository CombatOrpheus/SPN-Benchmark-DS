import h5py
import numpy as np


class SPNDataReader:
    """
    A reader class for the SPN HDF5 datasets.

    This class provides an easy-to-use interface to read data from the HDF5
    files generated by SPNGenerate.py. It supports getting the total number
    of samples, retrieving a specific sample by index, and iterating over
    all samples in the dataset.

    Args:
        hdf5_path (str): The path to the HDF5 file.
    """

    def __init__(self, hdf5_path):
        self.hdf5_path = hdf5_path
        self._file = None
        self._sample_keys = None

    def __enter__(self):
        self._file = h5py.File(self.hdf5_path, "r")
        # The samples are stored in the 'dataset_samples' group
        if "dataset_samples" not in self._file:
            raise ValueError("HDF5 file does not contain 'dataset_samples' group.")
        # Sorting the keys to ensure a consistent order
        self._sample_keys = sorted(self._file["dataset_samples"].keys())
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self._file:
            self._file.close()
            self._file = None
            self._sample_keys = None

    def __len__(self):
        """Returns the total number of samples in the dataset."""
        if self._sample_keys is None:
            with h5py.File(self.hdf5_path, "r") as hf:
                if "dataset_samples" in hf:
                    return len(hf["dataset_samples"])
                else:
                    return 0
        return len(self._sample_keys)

    def get_sample(self, index):
        """
        Retrieves a single sample by its index.

        Args:
            index (int): The index of the sample to retrieve.

        Returns:
            dict: A dictionary containing the data for the specified sample.
        """
        if index < 0 or index >= len(self):
            raise IndexError("Index out of range.")

        if self._file is None:
            # This allows for accessing samples without using a 'with' block,
            # but it's less efficient if getting many samples individually.
            with h5py.File(self.hdf5_path, "r") as hf:
                sample_name = sorted(hf["dataset_samples"].keys())[index]
                sample_group = hf["dataset_samples"][sample_name]
                return {key: value[()] for key, value in sample_group.items()}

        sample_name = self._sample_keys[index]
        sample_group = self._file["dataset_samples"][sample_name]
        return {key: value[()] for key, value in sample_group.items()}

    def __iter__(self):
        """
        Returns an iterator that yields one sample at a time.
        """
        for i in range(len(self)):
            yield self.get_sample(i)
